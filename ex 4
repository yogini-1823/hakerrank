#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

typedef struct {
    int* array;
    int size;
    int capacity;
} DynamicArray;

void initDynamicArray(DynamicArray* da) {
    da->size = 0;
    da->capacity = 1;
    da->array = malloc(da->capacity * sizeof(int));
}

void appendDynamicArray(DynamicArray* da, int value) {
    if (da->size == da->capacity) {
        da->capacity *= 2;
        da->array = realloc(da->array, da->capacity * sizeof(int));
    }
    da->array[da->size++] = value;
}

int* dynamicArray(int n, int queries_rows, int queries_columns, int** queries, int* result_count) {
    DynamicArray* seqList = malloc(n * sizeof(DynamicArray));
    for (int i = 0; i < n; i++) {
        initDynamicArray(&seqList[i]);
    }

    int lastAnswer = 0;
    int* results = malloc(queries_rows * sizeof(int));
    int resultSize = 0;

    for (int i = 0; i < queries_rows; i++) {
        int type = queries[i][0];
        int x = queries[i][1];
        int y = queries[i][2];

        int index = (x ^ lastAnswer) % n;

        if (type == 1) {
            appendDynamicArray(&seqList[index], y);
        } else if (type == 2) {
            int seqIndex = y % seqList[index].size;
            lastAnswer = seqList[index].array[seqIndex];
            results[resultSize++] = lastAnswer;
        }
    }

    *result_count = resultSize;
    results = realloc(results, resultSize * sizeof(int));

    for (int i = 0; i < n; i++) {
        free(seqList[i].array);
    }
    free(seqList);

    return results;
}

int main() {
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char** first_multiple_input = split_string(rtrim(readline()));

    int n = parse_int(*(first_multiple_input + 0));
    int q = parse_int(*(first_multiple_input + 1));

    int** queries = malloc(q * sizeof(int*));

    for (int i = 0; i < q; i++) {
        *(queries + i) = malloc(3 * sizeof(int));
        char** queries_item_temp = split_string(rtrim(readline()));

        for (int j = 0; j < 3; j++) {
            int queries_item = parse_int(*(queries_item_temp + j));
            *(*(queries + i) + j) = queries_item;
        }
    }

    int result_count;
    int* result = dynamicArray(n, q, 3, queries, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d\n", result[i]);
    }

    fclose(fptr);

    for (int i = 0; i < q; i++) {
        free(queries[i]);
    }
    free(queries);
    free(result);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;
        data = realloc(data, alloc_length);
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }

    return data;
}

char* ltrim(char* str) {
    while (*str != '\0' && isspace(*str)) {
        str++;
    }
    return str;
}

char* rtrim(char* str) {
    char* end = str + strlen(str) - 1;
    while (end >= str && isspace(*end)) {
        end--;
    }
    *(end + 1) = '\0';
    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");
    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);
        splits[spaces - 1] = token;
        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    return strtol(str, NULL, 10);
}
